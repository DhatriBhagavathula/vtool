// script.js
// Check if user is logged in
const email = localStorage.getItem("userEmail");
if (!email) {
  alert("Please log in first.");
  window.location.href = "login.html";
}

document.addEventListener("DOMContentLoaded", () => {
    const questions = [
        "Tell me about yourself.",
        "What are your strengths and weaknesses?",
        "Where do you see yourself in five years?",
        "Describe a challenge you faced and how you overcame it.",
        "Why do you want to work at our company?",
        "Tell me about a time you handled a difficult situation at work.",
        "What programming languages are you most comfortable with?",
        "How do you handle deadlines under pressure?",
        "Explain a project you worked on and your contributions.",
        "What do you do when you disagree with a team member?"
    ];

    let currentQuestionIndex = -1;
    let timer;

    const questionText = document.getElementById("question-text");
    const countdownElement = document.getElementById("countdown");
    const answerBox = document.getElementById("answer");
    const startBtn = document.getElementById("start-btn");
    const nextBtn = document.getElementById("next-btn");
    const saveBtn = document.getElementById("save-btn");
    const clearBtn = document.getElementById("clear-btn");
    const responseList = document.getElementById("response-list");
    const timeSelect = document.getElementById("time-select");
    const feedbackBox = document.getElementById("feedback-box");

    function startInterview() {
        currentQuestionIndex = 0;
        startBtn.disabled = true;
        loadQuestion();
    }

    function loadQuestion() {
        if (currentQuestionIndex < questions.length) {
            questionText.textContent = questions[currentQuestionIndex];
            answerBox.value = "";
            let selectedTime = parseInt(timeSelect.value);
            startTimer(selectedTime);
            nextBtn.disabled = false;
            saveBtn.disabled = false;
        } else {
            completeInterview();
        }
    }

    function startTimer(seconds) {
        clearInterval(timer);
        let timeLeft = seconds;
        countdownElement.textContent = `${timeLeft}s`;
        updateTimerStyle(timeLeft);

        timer = setInterval(() => {
            timeLeft--;
            countdownElement.textContent = `${timeLeft}s`;
            updateTimerStyle(timeLeft);

            if (timeLeft <= 0) {
                clearInterval(timer);
                nextQuestion();
            }
        }, 1000);
    }

    function updateTimerStyle(timeLeft) {
        const timerCircle = document.getElementById("timer-circle");
        timerCircle.classList.toggle("pulse", timeLeft <= 5);
    }

    function nextQuestion() {
        clearInterval(timer);
        currentQuestionIndex++;

        if (currentQuestionIndex < questions.length) {
            loadQuestion();
        } else {
            completeInterview();
        }
    }

    function completeInterview() {
        questionText.textContent = "Interview completed!";
        nextBtn.disabled = true;
        saveBtn.disabled = true;
    }

    function containsWord(word, text) {
        return new RegExp(`\\b${word}\\b`, 'i').test(text);
    }

    function saveAnswer() {
        const answerText = answerBox.value.trim();
        if (answerText) {
            const feedbackText = generateFeedback(answerText, currentQuestionIndex);

            const li = document.createElement("li");
            li.innerHTML = `<strong>Q:</strong> ${questions[currentQuestionIndex]}<br>
                            <strong>A:</strong> ${answerText}<br>
                            <span class="feedback"><strong>Feedback:</strong> ${feedbackText}</span>`;

            responseList.appendChild(li);
            feedbackBox.innerHTML = `<strong>Feedback:</strong> ${feedbackText}`;
            localStorage.setItem(`response_${currentQuestionIndex}`, answerText);
        }
    }

    function generateFeedback(answer, questionIndex) {
        const keywords = [
            ["experience", "background", "skills"],
            ["strength", "improve", "weakness"],
            ["career", "future", "goal"],
            ["challenge", "problem", "solution"],
            ["company", "mission", "value"],
            ["conflict", "resolve", "teamwork"],
            ["Python", "Java", "C++"],
            ["deadline", "pressure", "manage"],
            ["project", "contribution", "role"],
            ["disagree", "collaborate", "respect"]
        ];

        let feedback = "Try including keywords like: ";
        let found = false;

        keywords[questionIndex].forEach(word => {
            if (!containsWord(word, answer)) {
                feedback += word + ", ";
                found = true;
            }
        });

        return found ? feedback.slice(0, -2) : "Great answer! Well-structured and relevant.";
    }

    function clearAllResponses() {
        if (confirm("Are you sure you want to clear all responses?")) {
            localStorage.clear();
            responseList.innerHTML = "";
            feedbackBox.innerHTML = "";
        }
    }

    startBtn.addEventListener("click", startInterview);
    nextBtn.addEventListener("click", nextQuestion);
    saveBtn.addEventListener("click", saveAnswer);
    clearBtn.addEventListener("click", clearAllResponses);

    timeSelect.addEventListener("change", () => {
        if (currentQuestionIndex >= 0 && currentQuestionIndex < questions.length) {
            startTimer(parseInt(timeSelect.value));
        }
    });

    // Video Filter and Background
    const video = document.getElementById("video-preview");
    const filterSelect = document.getElementById("filter-select");
    const bgSelect = document.getElementById("bg-select");
    const customBgInput = document.getElementById("custom-bg");
    const videoContainer = document.getElementById("video-container");

    filterSelect.addEventListener("change", () => {
        video.style.filter = filterSelect.value;
    });

    bgSelect.addEventListener("change", () => {
        if (bgSelect.value === "custom") {
            customBgInput.style.display = "block";
        } else {
            customBgInput.style.display = "none";
            updateBackground(bgSelect.value);
        }
    });

    customBgInput.addEventListener("change", (e) => {
        const file = e.target.files[0];
        if (file) {
            const reader = new FileReader();
            reader.onload = function (event) {
                videoContainer.style.backgroundImage = `url('${event.target.result}')`;
            };
            reader.readAsDataURL(file);
        }
    });

    function updateBackground(type) {
        if (type === "none") {
            videoContainer.style.background = "none";
        } else if (type === "office") {
            videoContainer.style.backgroundImage = "url('office.jpg')";
        } else if (type === "plain") {
            videoContainer.style.background = "#f0f0f0";
        }
    }
});